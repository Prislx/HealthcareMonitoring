@inject HttpClient _client

<h3>FormComponent</h3>

<EditForm Model="@prescmed" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">

        <div class="form-group">
            <label>Medicine Id </label>
            <div>
                <InputSelect @bind-Value="prescmed.MedicineID" class="form-control">
                    <option value="">-- Select MedicineId --</option>
                    @if (Medicines != null)
                    {
                        foreach (var medicine in Medicines)
                        {


                            <option value="@medicine.Id">@medicine.MedName</option>}
                    }
                </InputSelect>
                <ValidationMessage For="@(() => prescmed.MedicineID)" />
            </div>
        </div>

        <div class="form-group">
            <label>Prescription Id </label>
            <div>
                <InputSelect @bind-Value="prescmed.PrescriptionID" class="form-control">
                    <option value="">-- Select PrescriptionId --</option>
                    @if (Prescriptions != null)
                    {
                        foreach (var prescription in Prescriptions)
                        {


                            <option value="@prescription.Id">@prescription.Description</option>}
                    }
                </InputSelect>
                <ValidationMessage For="@(() => prescmed.PrescriptionID)" />
            </div>
        </div>

        <div class="form-group">
            <label>Description: </label>
            <div>

                <InputText @bind-Value="@prescmed.Dosage" class="form-control" />
                <ValidationMessage For="@(() => prescmed.Dosage)" />
            </div>
        </div>
    </fieldset>
    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            Create Prescribe Medicine
        </button>}
    <BacktoList Target="prescmeds" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public PrescMed prescmed { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }



    private IList<Medicine> Medicines;
    private IList<Prescription> Prescriptions;


    protected async override Task OnInitializedAsync()
    {
        Medicines = await _client.GetFromJsonAsync<List<Medicine>>($"{Endpoints.MedicinesEndpoint}");
        Prescriptions = await _client.GetFromJsonAsync<List<Prescription>>($"{Endpoints.PrescriptionsEndpoint}");

    }

    }
