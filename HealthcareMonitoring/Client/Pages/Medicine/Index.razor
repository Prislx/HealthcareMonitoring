@page "/medicines/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]


<h3 class="card-title">Make Medicines</h3>

@if (Medicines == null)
{
    <div class="alert alert-info">Loading Medicines...</div> }
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>MedName</th>
                <th>Description</th>
                <th>ExpiryDate</th>
                <th>Quantity</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var Medicine in Medicines)
            {
            <tr>
                <td>@Medicine.Id</td>
                <td>@Medicine.MedName</td>
                <td>@Medicine.Description</td>
                <td>@Medicine.ExpiryDate</td>
                <td>@Medicine.Quantity</td>
                <td>
                    <a href="/Medicines/view/@Medicine.Id" class="btn btn-primary">
                        <span class="oi oi-book"></span>
                    </a>
                    <a href="/Medicines/edit/@Medicine.Id" class="btn btn-warning">
                        <span class="oi oi-pencil"></span>
                    </a>
                    <button class="btn btn-danger" @onclick="@(()=>Delete(Medicine.Id))">
                        <span class="oi oi-delete"></span>
                    </button>
                </td>
            </tr>
            }
        </tbody>
    </table>}


@code {
    private List<Medicine> Medicines;

    protected async override Task OnInitializedAsync()
    {
        Medicines = await _client.GetFromJsonAsync<List<Medicine>>($"{Endpoints.MedicinesEndpoint}");
    }

    async Task Delete(int MedicineId)
    {
        var Medicine = Medicines.First(q => q.Id == MedicineId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {Medicine.MedName}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.MedicinesEndpoint}/{MedicineId}");
            await OnInitializedAsync();
        }
    }

}

