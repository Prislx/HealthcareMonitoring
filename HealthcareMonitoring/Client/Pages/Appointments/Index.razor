@page "/appointments/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable

<h3 class="card-title">Make Appointments</h3>

<a href="/appointments/create/" class="btn btn-secondary">
    <span class="oi oi-plus"></span>Create New Appointment
</a>
<br />
<br />



@if (Appointments == null)
{
    <div class="alert alert-info">Loading Appointments...</div> }
else
{
<table class="table table-responsive" id="appointmentsTable">
    <thead>
        <tr>
            <th>Appointment Number</th>
            <th>Patient </th>
            <th>Staff </th>
            <th>Description</th>
            <th>AppdateTime</th>
            <th>View/Edit/Delete</th>

        </tr>
    </thead>
    <tbody>
        @foreach (var appointment in Appointments)
        {
            <tr>
                <td>@appointment.Id</td>
                <td>@appointment.Patient.PatientName</td>
                <td>@appointment.Staff.StaffName</td>
                <td>@appointment.Description</td>
                <td>@appointment.AppdateTime?.ToString("dd-MMMM-yyyy")</td>
                <td>
                    <a href="/appointments/view/@appointment.Id" class="btn btn-primary">
                        <span class="oi oi-book"></span>
                    </a>
                    <a href="/appointments/edit/@appointment.Id" class="btn btn-warning">
                        <span class="oi oi-pencil"></span>
                    </a>
                    <button class="btn btn-danger" @onclick="@(()=>Delete(appointment.Id))">
                        <span class="oi oi-delete"></span>
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>}

@code {
    private List<Appointment> Appointments;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Appointments = await _client.GetFromJsonAsync<List<Appointment>>($"{Endpoints.AppointmentsEndpoint}");
    }

    async Task Delete(int appointmentId)
    {
        var appointment = Appointments.First(q => q.Id == appointmentId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {appointment.Id}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.AppointmentsEndpoint}/{appointmentId}");
            await OnInitializedAsync();
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#appointmentsTable");
    }


    public void Dispose()
    {
        _interceptor.DisposeEvent();
        js.InvokeVoidAsync("DataTablesDispose", "#appointmentsTable");

    }

}
