@page "/prescmeds/create/"
@inject HttpClient _client
@inject NavigationManager _navManager

<h3 class="card-title">Create New Med Prescription</h3>
<hr />
<br />

<EditForm Model="@prescmed" OnValidSubmit="CreatePrescMed">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Medicine Id </label>
        <div>
            <InputSelect @bind-Value="prescmed.MedicineID" class="form-control">
                <option value="">-- Select MedicineId --</option>
                @if (Medicines != null)
                {
                    foreach (var medicine in Medicines)
                    {
                        <option value="@medicine.Id">@medicine.MedName</option>}
                }
            </InputSelect>
            <ValidationMessage For="@(() => prescmed.MedicineID)" />
        </div>
    </div>

    <div class="form-group">
        <label>Prescription Id </label>
        <div>
            <InputSelect @bind-Value="prescmed.PrescriptionID" class="form-control">
                <option value="">-- Select PrescriptionId --</option>
                @if (Prescriptions != null)
                {
                    foreach (var prescription in Prescriptions)
                    {
                        <option value="@prescription.Id">@prescription.Description</option>}
                }
            </InputSelect>
            <ValidationMessage For="@(() => prescmed.PrescriptionID)" />
        </div>
    </div>

    <div class="form-group">
        <label>Description: </label>
        <div>

            <InputText @bind-Value="@prescmed.Dosage" class="form-control" />
            <ValidationMessage For="@(() => prescmed.Dosage)" />
        </div>
    </div>

    <button type="submit" class="btn btn-success btn-block">
        Create Prescribe Medicine
    </button>
    
</EditForm>

@code { PrescMed prescmed = new PrescMed();

    private IList<Medicine> Medicines;
    private IList<Prescription> Prescriptions;


    protected async override Task OnInitializedAsync()
    {
        Medicines = await _client.GetFromJsonAsync<List<Medicine>>($"{Endpoints.MedicinesEndpoint}");
        Prescriptions = await _client.GetFromJsonAsync<List<Prescription>>($"{Endpoints.PrescriptionsEndpoint}");

    }

    private async Task CreatePrescMed()
    {
        await _client.PostAsJsonAsync(Endpoints.PrescMedsEndpoint, prescmed);
        _navManager.NavigateTo("/PrescMeds/");
    } }